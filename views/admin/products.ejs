<style>
  .btn-primary {
    font-weight: 600;
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
  }
</style>

<section class="py-10 px-4 sm:px-6" x-data="productPanel()">
  <div class="max-w-7xl mx-auto">
    <div
      class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4"
    >
      <h1 class="text-3xl font-bold text-neutral"><%= __('admin.products.title') %></h1>
      <button @click="openAddModal" class="btn btn-primary">
        <i class="fa-solid fa-plus"></i>
        <%= __('admin.products.add_product') %>
      </button>
    </div>

    <div class="overflow-x-auto bg-white rounded-box shadow-xl">
      <div class="mb-4 p-4 relative w-full max-w-sm">
        <span class="absolute inset-y-0 left-0 flex items-center pl-7">
          <i class="fa-solid fa-magnifying-glass text-neutral opacity-40"></i>
        </span>

        <input
          type="text"
          x-model.debounce.500ms="search"
          placeholder="<%= __('admin.products.search_placeholder') %>"
          class="input input-bordered w-full pl-10 pr-10 bg-white border-2 border-neutral focus:border-primary"
        />

        <button
          type="button"
          x-show="search.trim().length > 0"
          @click="search = ''"
          class="absolute inset-y-0 right-0 flex items-center pr-7 cursor-pointer text-neutral opacity-50 hover:opacity-100 transition-opacity"
        >
          <i class="fa-solid fa-circle-xmark"></i>
        </button>
      </div>
      <table class="table w-full">
        <thead class="bg-secondary text-neutral font-semibold">
          <tr>
            <th class="p-4"><%= __('admin.products.thumbnail') %></th>
            <th class="p-4"><%= __('admin.products.name') %></th>
            <th class="p-4"><%= __('admin.products.category') %></th>
            <th class="p-4"><%= __('admin.products.price') %></th>
            <th class="p-4"><%= __('admin.products.stock') %></th>
            <th class="p-4"><%= __('admin.products.actions') %></th>
          </tr>
        </thead>
        <tbody>
          <template x-for="product in products" :key="product._id">
            <tr
              class="hover:bg-secondary duration-200 transition-all cursor-pointer"
              @click="openViewModal(product)"
            >
              <td class="p-4">
                <img
                  :src="product.thumbnail? product.thumbnail : product.images[0]"
                  class="w-12 h-12 object-cover rounded-md border"
                />
              </td>
              <td class="p-4">
                <a
                  href="#"
                  @click.prevent.stop="openViewModal(product)"
                  class="font-medium hover:underline"
                  x-text="product.name['<%= lang %>']"
                >
                </a>
              </td>
              <td class="p-4" x-text="product.category['<%= lang %>']"></td>
              <td class="p-4">
                $<span x-text="(product.price).toFixed(2)"></span>
              </td>
              <td class="p-4" x-text="product.stock"></td>
              <td class="p-4 whitespace-nowrap space-x-2">
                <button
                  @click.stop="openEditModal(product)"
                  class="btn btn-sm btn-secondary"
                >
                  <i class="fa-solid fa-pen-to-square"></i>
                  <%= __('admin.products.edit') %>
                </button>
                <button
                  @click.stop="confirmDelete(product._id)"
                  class="btn btn-sm btn-error"
                >
                  <i class="fa-solid fa-trash-can"></i>
                  <%= __('admin.products.delete') %>
                </button>
              </td>
            </tr>
          </template>
        </tbody>
      </table>
    </div>
  </div>

  <div class="flex justify-center items-center mt-6">
    <div class="join">
      <button
        @click="prevPage"
        :disabled="!pagination.hasPrevPage"
        class="join-item btn btn-secondary"
      >
        <i class="fa-solid fa-arrow-left"></i>
        <%= __('admin.products.prev') %>
      </button>

      <!-- Pagination Numbers -->
      <template x-for="(page, index) in pageNumbers" :key="index">
        <div>
          <button
            x-show="typeof page === 'string'"
            class="join-item btn btn-disabled"
            x-text="page"
          ></button>

          <button
            x-show="typeof page === 'number'"
            @click="goToPage(page)"
            class="join-item btn"
            :class="{ 'btn-primary': page === currentPage }"
            x-text="page"
          ></button>
        </div>
      </template>

      <button
        @click="nextPage"
        :disabled="!pagination.hasNextPage"
        class="join-item btn btn-primary"
      >
        <%= __('admin.products.next') %>
        <i class="fa-solid fa-arrow-right"></i>
      </button>
    </div>
  </div>

  <!-- Edit modal -->
  <dialog x-ref="addEditModal" class="modal">
    <div class="modal-box w-11/12 max-w-3xl bg-white">
      <form method="dialog">
        <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">
          ✕
        </button>
      </form>
      <h3
        class="font-bold text-2xl text-neutral mb-5"
        x-text="editMode ? `<%= __('admin.products.edit_product') %>` : `<%= __('admin.products.add_new_product') %>`"
      ></h3>

      <form
        @submit.prevent="submitForm"
        enctype="multipart/form-data"
        class="space-y-4"
      >
        <div class="form-control">
<!-- Name Fields -->
<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div>
    <label class="label">
      <span class="label-text"><%= __('admin.products.name') %> (en)</span>
    </label>
    <input
      type="text"
      x-model="form.name.en"
      class="input input-bordered w-full bg-white border-2 border-neutral"
      required
    />
  </div>
  <div>
    <label class="label">
      <span class="label-text"><%= __('admin.products.name') %> (he)</span>
    </label>
    <input
      type="text"
      x-model="form.name.he"
      class="input input-bordered w-full bg-white border-2 border-neutral"
      required
    />
  </div>
</div>

<!-- Description Fields -->
<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div>
    <label class="label">
      <span class="label-text"><%= __('admin.products.description') %> (en)</span>
    </label>
    <textarea
      x-model="form.description.en"
      class="textarea textarea-bordered w-full bg-white border-2 border-neutral"
      rows="3"
      required
    ></textarea>
  </div>
  <div>
    <label class="label">
      <span class="label-text"><%= __('admin.products.description') %> (he)</span>
    </label>
    <textarea
      x-model="form.description.he"
      class="textarea textarea-bordered w-full bg-white border-2 border-neutral"
      rows="3"
      required
    ></textarea>
  </div>
</div>

       <div class="form-control">
  <label class="label">
    <span class="label-text"><%= __('admin.products.thumbnail') %></span>
  </label>
  <input
    type="file"
    accept="image/*"
    @change="handleThumbnailFile"
    class="file-input file-input-bordered file-input-sm w-full bg-white border-2 border-neutral"
  />
  <template x-if="thumbnailPreview">
    <div class="mt-3 relative inline-block">
      <img :src="thumbnailPreview" class="w-32 h-32 object-cover rounded-md border" />
      <button
        type="button"
        class="absolute top-0 right-0 bg-error text-white rounded-full w-5 h-5 flex items-center justify-center text-xs"
        @click="removeThumbnail"
      >
        ×
      </button>
    </div>
  </template>
</div>


        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="form-control">
            <label class="label">
              <span class="label-text"><%= __('admin.products.price') %></span>
            </label>
            <input
              type="number"
              step="0.01"
              x-model="form.price"
              class="input input-bordered w-full bg-white border-2 border-neutral"
              required
            />
          </div>
          <div class="form-control">
            <label class="label">
              <span class="label-text"><%= __('admin.products.stock') %></span>
            </label>
            <input
              type="number"
              x-model="form.stock"
              class="input input-bordered w-full bg-white border-2 border-neutral"
            />
          </div>
          <div class="form-control">
            <label class="label">
              <span class="label-text"><%= __('admin.products.category') %></span>
            </label>
<select
  x-model="form.category"
  class="select select-bordered w-full bg-white border-2 border-neutral"
  required
>
  <option value="" disabled><%= __('admin.products.select') %></option>
  <option value="inner"><%= __('admin.products.interior') %></option>
  <option value="main"><%= __('admin.products.exterior') %></option>
</select>

          </div>
        </div>

        <div class="divider"></div>

        <div class="form-control">
          <label class="label">
            <span class="label-text font-medium"><%= __('admin.products.default_images') %></span>
          </label>
          <p class="text-xs text-gray-500 mb-2">
            <%= __('admin.products.default_images_help') %>
          </p>
          <input
            type="file"
            accept="image/*"
            multiple
            @change="handleDefaultFiles"
            class="file-input file-input-bordered file-input-sm w-full bg-white border-2 border-neutral"
          />
          <div class="flex flex-wrap mt-3 gap-2">
<template x-for="(img, index) in defaultPreviewImages" :key="index">
  <div class="relative inline-block">
    <img :src="img" class="w-20 h-20 object-cover rounded-md border" />
    <button
      type="button"
      class="absolute top-0 right-0 bg-error text-white rounded-full w-5 h-5 flex items-center justify-center text-xs"
      @click="removeImage(index)"
    >
      ×
    </button>
  </div>
</template>

          </div>
        </div>

        <div class="divider"></div>

        <div>
          <div class="flex justify-between items-center mb-2">
            <h3 class="text-lg font-medium text-gray-700"><%= __('admin.products.manage_colors') %></h3>
            <button
              type="button"
              @click="addColor"
              class="btn btn-sm btn-secondary"
            >
              <%= __('admin.products.add_color') %>
            </button>
          </div>
          <p class="text-xs text-gray-500 mb-3">
            <%= __('admin.products.add_color_help') %>
          </p>

          <div class="space-y-4">
            <template x-for="(color, index) in form.colors" :key="index">
              <div class="card card-compact bg-base-200/30 p-4">
                <div class="card-body gap-3">
                  <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <input
                      type="text"
                      x-model="color.name"
                      placeholder="<%= __('admin.products.color_name_placeholder') %>"
                      class="input input-sm w-full bg-white border-2 border-neutral"
                      required
                    />
                    <div class="flex gap-2">
                      <input
                        type="text"
                        x-model="color.hex"
                        placeholder="<%= __('admin.products.hex_code_placeholder') %>"
                        class="input input-sm w-full bg-white border-2 border-neutral"
                        required
                      />
                      <input
                        type="color"
                        x-model="color.hex"
                        class="input-sm p-0 w-10 h-10 rounded cursor-pointer bg-white border-2 border-neutral"
                      />
                    </div>
                    <button
                      type="button"
                      @click="removeColor(index)"
                      class="btn btn-sm btn-error btn-outline w-full md:w-auto"
                    >
                      <%= __('admin.products.remove') %>
                    </button>
                  </div>
                  <input
                    type="file"
                    multiple
                    @change="handleColorFiles(index, $event)"
                    class="file-input file-input-bordered file-input-xs w-full bg-white border-2 border-neutral"
                  />
<div class="flex flex-wrap mt-2 gap-2">
  <!-- الصور القديمة -->
  <template x-for="(img, i) in color.existing" :key="'old'+i">
    <div class="relative inline-block">
      <img :src="img" class="w-16 h-16 object-cover rounded-md border" />
      <button
        type="button"
        class="absolute top-0 right-0 bg-error text-white rounded-full w-4 h-4 flex items-center justify-center text-xs"
        @click="removeColorImage(index, i)"
      >
        ×
      </button>
    </div>
  </template>

  <!-- الصور الجديدة -->
  <template x-for="(url, i) in color.preview" :key="'new'+i">
    <div class="relative inline-block">
      <img :src="url" class="w-16 h-16 object-cover rounded-md border" />
      <button
        type="button"
        class="absolute top-0 right-0 bg-error text-white rounded-full w-4 h-4 flex items-center justify-center text-xs"
        @click="removeColorImage(index, i)"
      >
        ×
      </button>
    </div>
  </template>
</div>

                  <div class="flex flex-wrap mt-2 gap-2">
                    <template x-for="(url, i) in color.preview" :key="i">
                      <img
                        :src="url"
                        class="w-16 h-16 object-cover rounded-md border"
                      />
                    </template>
                  </div>
                </div>
              </div>
            </template>
          </div>
        </div>

        <div class="modal-action mt-6">
          <form method="dialog">
            <button class="btn btn-ghost"><%= __('admin.products.cancel') %></button>
          </form>
          <button
            type="submit"
            class="btn btn-primary"
            x-text="editMode ? `<%= __("admin.products.update_product") %>` : `<%= __("admin.products.add_product") %>`"
          ></button>
        </div>
      </form>
    </div>
  </dialog>

  <!-- Delete modal -->
  <dialog x-ref="deleteModal" class="modal">
    <div class="modal-box bg-white">
      <h3 class="font-bold text-lg text-neutral"><%= __('admin.products.are_you_sure') %></h3>
      <p class="py-4">
        <%= __('admin.products.delete_confirmation') %>
      </p>
      <div class="modal-action">
        <form method="dialog">
          <button class="btn btn-ghost"><%= __('admin.products.cancel') %></button>
        </form>
        <button @click="deleteProduct" class="btn btn-error">
          <%= __('admin.products.yes_delete') %>
        </button>
      </div>
    </div>
  </dialog>

  <!-- View modal -->
  <dialog x-ref="viewModal" class="modal">
    <div class="modal-box w-11/12 max-w-4xl bg-white">
      <form method="dialog">
        <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">
          ✕
        </button>
      </form>

      <template x-if="selectedProduct">
        <div class="space-y-4">
          <h3
            class="font-bold text-3xl text-neutral"
            x-text="selectedProduct.name['<%= lang %>']"
          ></h3>
          <a
            :href="`${baseUrl}/products/${selectedProduct._id}`"
            target="_blank"
            class="border-2 border-black py-2 px-4 rounded-2xl flex justify-center w-max items-center gap-2"
          >
            <i class="fa-solid fa-eye"></i>

            <%= __('admin.products.view_product') %>
          </a>
          <p class="text-gray-600" x-text="selectedProduct.description"></p>

          <div class="flex flex-wrap gap-4">
            <div class="badge badge-lg badge-secondary text-white">
              <%= __('admin.products.price_label') %> $<span x-text="selectedProduct.price"></span>
            </div>
            <div class="badge badge-lg badge-outline">
              <%= __('admin.products.stock_label') %> <span x-text="selectedProduct.stock"></span>
            </div>
            <div class="badge badge-lg badge-outline">
              <%= __('admin.products.category_label') %> <span x-text="selectedProduct.category"></span>
            </div>
          </div>

          <div class="divider"></div>

          <h4 class="text-lg font-medium"><%= __('admin.products.default_images') %></h4>
          <div class="carousel w-full bg-base-200/50 rounded-box h-64">
            <template x-for="(img, i) in selectedProduct.images" :key="i">
              <div :id="'slide' + i" class="carousel-item relative w-full">
                <img :src="img" class="w-full h-full object-contain" />
                <div
                  class="absolute flex justify-between transform -translate-y-1/2 left-5 right-5 top-1/2"
                >
                  <a
                    :href="'#slide' + (i === 0 ? selectedProduct.images.length - 1 : i - 1)"
                    class="btn btn-circle btn-sm"
                    >❮</a
                  >
                  <a
                    :href="'#slide' + (i === selectedProduct.images.length - 1 ? 0 : i + 1)"
                    class="btn btn-circle btn-sm"
                    >❯</a
                  >
                </div>
              </div>
            </template>
            <div
              x-show="selectedProduct.images.length === 0"
              class="w-full flex items-center justify-center"
            >
              <span class="text-gray-500"><%= __('admin.products.no_default_images') %></span>
            </div>
          </div>

          <div class="divider"></div>

          <h4 class="text-lg font-medium"><%= __('admin.products.available_colors') %></h4>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <template
              x-for="(color, c_idx) in selectedProduct.colors"
              :key="c_idx"
            >
              <div class="card card-compact bg-base-200/30">
                <div class="card-body">
                  <div class="flex items-center gap-3 mb-2">
                    <div
                      class="w-8 h-8 rounded-full border-2 border-white shadow"
                      :style="{ backgroundColor: color.hex }"
                    ></div>
                    <span
                      class="card-title text-base"
                      x-text="color.name"
                    ></span>
                  </div>

                  <div class="carousel w-full bg-white rounded-box h-48">
                    <template x-for="(img, i_idx) in color.images" :key="i_idx">
                      <div
                        :id="'color' + c_idx + 'img' + i_idx"
                        class="carousel-item relative w-full"
                      >
                        <img :src="img" class="w-full h-full object-contain" />
                        <div
                          class="absolute flex justify-between transform -translate-y-1/2 left-2 right-2 top-1/2"
                        >
                          <a
                            :href="'#color' + c_idx + 'img' + (i_idx === 0 ? color.images.length - 1 : i_idx - 1)"
                            class="btn btn-circle btn-xs"
                            >❮</a
                          >
                          <a
                            :href="'#color' + c_idx + 'img' + (i_idx === color.images.length - 1 ? 0 : i_idx + 1)"
                            class="btn btn-circle btn-xs"
                            >❯</a
                          >
                        </div>
                      </div>
                    </template>
                    <div
                      x-show="color.images.length === 0"
                      class="w-full flex items-center justify-center"
                    >
                      <span class="text-gray-500 text-sm"
                        ><%= __('admin.products.no_images_for_color') %></span
                      >
                    </div>
                  </div>
                </div>
              </div>
            </template>
            <div
              x-show="selectedProduct.colors.length === 0"
              class="md:col-span-2 text-center text-gray-500 py-4"
            >
              <span><%= __('admin.products.no_specific_colors') %></span>
            </div>
          </div>
        </div>
      </template>
    </div>
  </dialog>
</section>

<script>
  function productPanel() {
    return {
      products: [],
      search: "",
      selectedProduct: null, // For the new view modal
      pagination: {}, // هنخزن معلومات الـ pagination هنا
      currentPage: 1, // هنتتبع الصفحة الحالية
      pageNumbers: [],
      productId: null,
      editMode: false,
      baseUrl: "<%= req.protocol + '://' + req.get('host') %>",
      defaultPreviewImages: [],
      form: {
  name: { en: "", he: "" },
  description: { en: "", he: "" },
  price: "",
  stock: "",
  category: "",
  thumbnail: "",
  images: [],
  colors: [],
},


      // Fetch products (with pagination)
      async fetchProducts(page = 1) {
        try {
          // ✨ الجديد: استخدام URLSearchParams لبناء الـ URL
          const url = new URL(`/admin/api/products`, window.location.origin);
          url.searchParams.append("page", page);

          // ضيف كلمة البحث *فقط* لو هي مش فاضية
          if (this.search.trim()) {
            url.searchParams.append("search", this.search);
          }

          const res = await fetch(url);
          if (!res.ok) throw new Error("Network response was not ok");

          const response = await res.json();
          this.products = response.data.products;
          this.pagination = response.data.pagination;
          this.currentPage = response.data.pagination.currentPage;

          this.updatePageNumbers();
          if (this.currentPage > this.pagination.totalPages) {
            this.currentPage = this.pagination.totalPages || 1;
            this.fetchProducts(this.currentPage);
          }
        } catch (error) {
          console.error("Failed to fetch products:", error);
        }
      },
      // Reset form
      resetForm() {
        this.form = {
  name: { en: "", he: "" },
  description: { en: "", he: "" },
  price: "",
  stock: "",
  category: "",
  thumbnail: "",
  images: [],
  colors: [],
};

        this.defaultPreviewImages = [];
        this.editMode = false;
        this.productId = null;
      },

      // --- Modal Triggers ---
      openAddModal() {
        this.resetForm();
        this.$refs.addEditModal.showModal(); // Use daisyUI method
      },

   openEditModal(product) {
  this.resetForm();
  this.editMode = true;
  this.productId = product._id;

  // الاسم والوصف
  this.form.name = { ...product.name };
  this.form.description = { ...product.description };
  this.form.price = product.price || "";
  this.form.stock = product.stock || "";
  this.form.category = product.category || "";

  // ✅ Thumbnail preview
  this.form.thumbnail = null;
  this.thumbnailPreview = product.thumbnail || "";

  // ✅ الصور القديمة (main images)
  this.existingImages = [...(product.images || [])];
  this.defaultPreviewImages = [...this.existingImages];

  // ✅ الألوان
  this.form.colors =
    product.colors?.map((c) => ({
      name: c.name,
      hex: c.hex,
      images: [],
      preview: [],
      existing: c.images || [],
    })) || [];

  this.$refs.addEditModal.showModal();
},

      // NEW: Open View Modal
      openViewModal(product) {
        this.selectedProduct = product;
        this.$refs.viewModal.showModal(); // Use daisyUI method
      },

      confirmDelete(id) {
        this.productId = id;
        this.$refs.deleteModal.showModal(); // Use daisyUI method
      },

      // --- Form/Color Logic ---
      addColor() {
        this.form.colors.push({
          name: "",
          hex: "#ACA59B", // Default to your secondary color
          images: [],
          preview: [],
        });
      },

      removeColor(index) {
        this.form.colors.splice(index, 1);
      },

      handleDefaultFiles(e) {
  const files = Array.from(e.target.files);
  this.form.images.push(...files);
  const newPreviews = files.map((f) => URL.createObjectURL(f));
  this.defaultPreviewImages.push(...newPreviews);
},


      handleColorFiles(index, e) {
        const files = Array.from(e.target.files);
        this.form.colors[index].images = files;
        this.form.colors[index].preview = files.map((f) =>
          URL.createObjectURL(f)
        );
      },

      handleThumbnailFile(e) {
        const file = e.target.files[0];
        this.form.thumbnail = file;
        this.thumbnailPreview = URL.createObjectURL(file);
      },

      removeImage(index) {
  // احذف الصورة من الـ preview
  this.defaultPreviewImages.splice(index, 1);

  // لو الصورة دي من القديمة احذفها من existingImages
  if (this.existingImages[index]) {
    this.existingImages.splice(index, 1);
  } else {
    // لو دي كانت جديدة (file object)
    this.form.images.splice(index - this.existingImages.length, 1);
  }
},

handleThumbnailFile(e) {
  const file = e.target.files[0];
  this.form.thumbnail = file;
  this.thumbnailPreview = URL.createObjectURL(file);
},
removeThumbnail() {
  this.thumbnailPreview = "";
  this.form.thumbnail = null;
},


removeColorImage(colorIndex, imgIndex) {
  const color = this.form.colors[colorIndex];

  if (color.existing && color.existing[imgIndex]) {
    color.existing.splice(imgIndex, 1);
  } else if (color.preview && color.preview[imgIndex]) {
    color.preview.splice(imgIndex, 1);
    color.images.splice(imgIndex, 1);
  }
},

      // --- API Calls ---
      async submitForm() {
        const formData = new FormData();

        // Append simple fields
formData.append("name", JSON.stringify(this.form.name));
formData.append("description", JSON.stringify(this.form.description));

        formData.append("price", this.form.price);
        formData.append("stock", this.form.stock);
        formData.append("category", this.form.category);
// 🖼️ Thumbnail logic
if (this.thumbnailPreview && typeof this.thumbnailPreview === "string" && !this.thumbnailPreview.startsWith("blob:")) {
  formData.append("thumbnailOld", this.thumbnailPreview);
}
if (this.form.thumbnail) {
  formData.append("thumbnail", this.form.thumbnail);
}


        // 1️⃣ الصور القديمة اللي لسه موجودة
// 1️⃣ الصور القديمة فقط (نستبعد blob URLs)
const oldImages = this.defaultPreviewImages.filter(
  (img) => typeof img === "string" && !img.startsWith("blob:")
);

// 2️⃣ ابعتهم كـ JSON في formData
formData.append("imagesOld", JSON.stringify(oldImages));

// 3️⃣ الصور الجديدة (File objects)
this.form.images.forEach((img) => {
  formData.append("images", img);
});


// 🎨 Append color data (names, hex, old + new images)
const colorMeta = this.form.colors.map((color, index) => {
  // 1️⃣ أرسل بيانات اللون الأساسية
  const data = {
    name: color.name,
    hex: color.hex,
  };

  // 2️⃣ أرسل الصور القديمة اللي فضلها المستخدم
  const keptOld = (color.existing || []).filter(
    (img) => typeof img === "string" && !img.startsWith("blob:")
  );
  formData.append(`colorsOld_${index}`, JSON.stringify(keptOld));

  // 3️⃣ أرسل الصور الجديدة
  (color.images || []).forEach((imgFile) => {
    formData.append(`colorImages_${index}`, imgFile);
  });

  return data;
});

// 4️⃣ في الآخر، أرسل الـ JSON نفسه (الاسم والـ hex)
formData.append("colors", JSON.stringify(colorMeta));

for (const [key, value] of formData.entries()) {
  console.log("📦", key, value);
}


        const url = this.editMode
          ? `/admin/api/products/${this.productId}`
          : `/admin/api/products`;
        const method = this.editMode ? "PUT" : "POST";

        try {

          const res = await fetch(url, { method, body: formData });
          if (!res.ok) throw new Error("Form submission failed");

          this.$refs.addEditModal.close(); // Close modal on success
          this.fetchProducts(); // Refresh table
        } catch (error) {
          console.error("Failed to submit form:", error);
        }
      },

      async deleteProduct() {
        try {
          await fetch(`/admin/api/products/${this.productId}`, {
            method: "DELETE",
          });
          this.$refs.deleteModal.close(); // Close modal on success
          this.fetchProducts(); // Refresh table
        } catch (error) {
          console.error("Failed to delete product:", error);
        }
      },

      nextPage() {
        if (this.pagination.hasNextPage) {
          this.fetchProducts(this.currentPage + 1);
        }
      },

      prevPage() {
        if (this.pagination.hasPrevPage) {
          this.fetchProducts(this.currentPage - 1);
        }
      },

      goToPage(page) {
        // لو ضغط على "..." أو نفس الصفحة الحالية، متعملش حاجة
        if (typeof page !== "number" || page === this.currentPage) return;
        this.fetchProducts(page);
      },

      // دالة لحساب أرقام الصفحات اللي هتظهر
      updatePageNumbers() {
        const total = this.pagination.totalPages;
        const current = this.pagination.currentPage;
        const range = [];
        const delta = 2; // عدد الصفحات اللي تظهر قبل وبعد الحالية

        // لو الصفحات قليلة، اظهرهم كلهم
        if (total <= 7) {
          this.pageNumbers = Array.from({ length: total }, (_, i) => i + 1);
          return;
        }

        // أضف أول وآخر صفحة دايمًا
        range.push(1);

        // أضف "..." بعد الأولى لو الفارق كبير
        if (current - delta > 2) {
          range.push("...");
        }

        // الصفحات حول الحالية
        for (
          let i = Math.max(2, current - delta);
          i <= Math.min(total - 1, current + delta);
          i++
        ) {
          range.push(i);
        }

        // أضف "..." قبل الأخيرة لو في مسافة
        if (current + delta < total - 1) {
          range.push("...");
        }

        // أضف آخر صفحة
        range.push(total);

        this.pageNumbers = range;
      },
      // Init
      init() {
        this.fetchProducts(this.currentPage);
        this.$watch("search", () => {
          this.fetchProducts(1);
        });
      },
    };
  }
</script>
